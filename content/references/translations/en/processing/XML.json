{
  "brief": "This is the base class used for the Processing XML library,\n           representing a single node of an <b>XML</b> tree",
  "methods": [
    {
      "anchor": "XML_parse_",
      "name": "parse()",
      "desc": "Converts <b>String</b> content to an <b>XML</b> object"
    },
    {
      "anchor": "XML_getParent_",
      "name": "getParent()",
      "desc": "Gets a copy of the element's parent"
    },
    {
      "anchor": "XML_getName_",
      "name": "getName()",
      "desc": "Gets the element's full name"
    },
    {
      "anchor": "XML_setName_",
      "name": "setName()",
      "desc": "Sets the element's name"
    },
    {
      "anchor": "XML_getChildCount_",
      "name": "getChildCount()",
      "desc": "Returns the element's number of children"
    },
    {
      "anchor": "XML_hasChildren_",
      "name": "hasChildren()",
      "desc": "Checks whether or not an element has any children"
    },
    {
      "anchor": "XML_listChildren_",
      "name": "listChildren()",
      "desc": "Returns the names of all children as an array"
    },
    {
      "anchor": "XML_getChildren_",
      "name": "getChildren()",
      "desc": "Returns an array containing all child elements"
    },
    {
      "anchor": "XML_getChild_",
      "name": "getChild()",
      "desc": "Returns the child element with the specified index value or path"
    },
    {
      "anchor": "XML_addChild_",
      "name": "addChild()",
      "desc": "Appends a new child to the element"
    },
    {
      "anchor": "XML_removeChild_",
      "name": "removeChild()",
      "desc": "Removes the specified child"
    },
    {
      "anchor": "XML_getAttributeCount_",
      "name": "getAttributeCount()",
      "desc": "Counts the specified element's number of attributes"
    },
    {
      "anchor": "XML_listAttributes_",
      "name": "listAttributes()",
      "desc": "Returns a list of names of all attributes as an array"
    },
    {
      "anchor": "XML_hasAttribute_",
      "name": "hasAttribute()",
      "desc": "Checks whether or not an element has the specified attribute"
    },
    {
      "anchor": "XML_getString_",
      "name": "getString()",
      "desc": "Gets the content of an attribute as a <b>String</b>"
    },
    {
      "anchor": "XML_setString_",
      "name": "setString()",
      "desc": "Sets the content of an attribute as a <b>String</b>"
    },
    {
      "anchor": "XML_getInt_",
      "name": "getInt()",
      "desc": "Gets the content of an attribute as an <b>int</b>"
    },
    {
      "anchor": "XML_setInt_",
      "name": "setInt()",
      "desc": "Sets the content of an attribute as an <b>int</b>"
    },
    {
      "anchor": "XML_getFloat_",
      "name": "getFloat()",
      "desc": "Gets the content of an attribute as a <b>float</b>"
    },
    {
      "anchor": "XML_setFloat_",
      "name": "setFloat()",
      "desc": "Sets the content of an attribute as a <b>float</b>"
    },
    {
      "anchor": "XML_getContent_",
      "name": "getContent()",
      "desc": "Gets the content of an element"
    },
    {
      "anchor": "XML_getIntContent_",
      "name": "getIntContent()",
      "desc": "Gets the content of an element as an <b>int</b>"
    },
    {
      "anchor": "XML_getFloatContent_",
      "name": "getFloatContent()",
      "desc": "Gets the content of an element as a <b>float</b>"
    },
    {
      "anchor": "XML_setContent_",
      "name": "setContent()",
      "desc": "Sets the content of an element"
    },
    {
      "anchor": "XML_format_",
      "name": "format()",
      "desc": "Formats <b>XML</b> data as a <b>String</b>"
    },
    {
      "anchor": "XML_toString_",
      "name": "toString()",
      "desc": "Gets <b>XML</b> data as a <b>String</b> using default formatting"
    }
  ],
  "csspath": "../../",
  "isLibrary": "true",
  "classFields": [],
  "description": "<b>XML</b> is a representation of an <b>XML</b> object, able to parse <b>XML</b> code. Use\n <b>loadXML()</b> to load external XML files and create <b>XML</b>\n objects.<br/>\n <br/>\n Only files encoded as UTF-8 (or plain ASCII) are parsed properly; the\n encoding parameter inside <b>XML</b> files is ignored.",
  "type": "class",
  "constructors": ["XML(name)"],
  "related": ["loadXML_", "parseXML_", "saveXML_"],
  "name": "XML",
  "classanchor": "XML",
  "category": "data",
  "subcategory": "composite",
  "parameters": [
    {
      "name": "name",
      "description": "creates a node with this name",
      "type": ["String"]
    }
  ]
}
