{
  "brief": "To create vectors from 3D data, use the <b>beginRaw()</b> and\n <b>endRaw()</b> commands",
  "related": ["endRaw_"],
  "name": "beginRaw()",
  "description": "To create vectors from 3D data, use the <b>beginRaw()</b> and\n <b>endRaw()</b> commands. These commands will grab the shape data just\n before it is rendered to the screen. At this stage, your entire scene is\n nothing but a long list of individual lines and triangles. This means\n that a shape created with <b>sphere()</b> function will be made up of\n hundreds of triangles, rather than a single object. Or that a\n multi-segment line shape (such as a curve) will be rendered as\n individual segments.\n <br/><br/>\n When using <b>beginRaw()</b> and <b>endRaw()</b>, it's possible to write\n to either a 2D or 3D renderer. For instance, <b>beginRaw()</b> with the\n PDF library will write the geometry as flattened triangles and lines,\n even if recording from the <b>P3D</b> renderer.\n <br/><br/>\n If you want a background to show up in your files, use <b>rect(0, 0,\n width, height)</b> after setting the <b>fill()</b> to the background\n color. Otherwise, the background will not be rendered to the file because\n the background is not shape.\n <br/><br/>\n Using <b>hint(ENABLE_DEPTH_SORT)</b> can improve the appearance of 3D\n geometry drawn to 2D file formats. See the <b>hint()</b> reference for\n more details.\n <br/><br/>\n See examples in the reference for the <b>PDF</b> and <b>DXF</b>\n libraries for more information.",
  "syntax": ["beginRaw(renderer, filename)"],
  "returns": "PGraphics or void",
  "type": "function",
  "category": "output",
  "subcategory": "files",
  "parameters": [
    {
      "name": "renderer",
      "description": "for example, PDF or DXF",
      "type": ["String"]
    },
    {
      "name": "filename",
      "description": "filename for output",
      "type": ["String"]
    }
  ]
}
