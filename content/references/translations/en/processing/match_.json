{
  "brief": "The function is used to apply a regular expression to a\n           piece of text, and return matching groups (elements found inside\n           parentheses) as a <b>String</b> array",
  "related": ["matchAll_", "split_", "splitTokens_", "join_", "trim_"],
  "name": "match()",
  "description": "This function is used to apply a regular expression to a piece of text, and\n return matching groups (elements found inside parentheses) as a String\n array. If there are no matches, a <b>null</b> value will be returned. If no groups\n are specified in the regular expression, but the sequence matches, an array\n of length 1 (with the matched text as the first element of the array) will\n be returned.<br/>\n <br/>\n To use the function, first check to see if the result is <b>null</b>. If the\n result is null, then the sequence did not match at all. If the sequence did\n match, an array is returned.<br/>\n <br/>\n If there are groups (specified by sets of parentheses) in the regular\n expression, then the contents of each will be returned in the array.\n Element [0] of a regular expression match returns the entire matching\n string, and the match groups start at element [1] (the first group is [1],\n the second [2], and so on).<br/>\n <br/>\n The syntax can be found in the reference for Java's <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\">Pattern</a>\n class. For regular expression syntax, read the\n <a href=\"https://docs.oracle.com/javase/tutorial/essential/regex/\">Java\n Tutorial</a> on the topic.",
  "syntax": ["match(str, regexp)"],
  "returns": "String[]",
  "type": "function",
  "category": "data",
  "subcategory": "string_functions",
  "parameters": [
    {
      "name": "str",
      "description": "the String to be searched",
      "type": ["String"]
    },
    {
      "name": "regexp",
      "description": "the regexp to be used for matching",
      "type": ["String"]
    }
  ]
}
