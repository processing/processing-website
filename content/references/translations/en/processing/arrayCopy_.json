{
  "brief": "Copies an array (or part of an array) to another array",
  "related": ["concat_"],
  "name": "arrayCopy()",
  "description": "Copies an array (or part of an array) to another array. The <b>src</b>\n array is copied to the <b>dst</b> array, beginning at the position\n specified by <b>srcPosition</b> and into the position specified by\n <b>dstPosition</b>. The number of elements to copy is determined by\n <b>length</b>. Note that copying values overwrites existing values in the\n destination array. To append values instead of overwriting them, use\n <b>concat()</b>.<br/>\n <br/>\n The simplified version with only two arguments &mdash; <b>arrayCopy(src,\n dst)</b> &mdash; copies an entire array to another of the same size. It is\n equivalent to <b>arrayCopy(src, 0, dst, 0, src.length)</b>.<br/>\n <br/>\n Using this function is far more efficient for copying array data than\n iterating through a <b>for()</b> loop and copying each element\n individually. This function only copies references, which means that for\n most purposes it only copies one-dimensional arrays (a single set of\n brackets). If used with a two (or three or more) dimensional array, it will\n only copy the references at the first level, because a two-dimensional\n array is simply an \"array of arrays\". This does not produce an error,\n however, because this is often the desired behavior. Internally, this\n function calls Java's <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-\">System.arraycopy()</a>\n method, so most things that apply there are inherited.",
  "syntax": [
    "arrayCopy(src, srcPosition, dst, dstPosition, length)",
    "arrayCopy(src, dst, length)",
    "arrayCopy(src, dst)"
  ],
  "returns": "void",
  "type": "function",
  "category": "data",
  "subcategory": "array functions",
  "parameters": [
    { "name": "src", "description": "the source array", "type": ["Object"] },
    {
      "name": "srcPosition",
      "description": "starting position in the source array",
      "type": ["int"]
    },
    {
      "name": "dst",
      "description": "the destination array of the same data type as the source array",
      "type": ["Object"]
    },
    {
      "name": "dstPosition",
      "description": "starting position in the destination array",
      "type": ["int"]
    },
    {
      "name": "length",
      "description": "number of array elements to be copied",
      "type": ["int"]
    }
  ]
}
