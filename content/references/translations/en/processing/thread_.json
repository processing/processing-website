{
  "brief": "Launch a new thread and call the specified function from that new\n           thread",
  "related": ["setup_", "draw_", "loop_", "noLoop_"],
  "name": "thread()",
  "description": "Processing sketches follow a specific sequence of steps: <b>setup()</b>\n first, followed by <b>draw()</b> over and over and over again in a loop. A\n thread is also a series of steps with a beginning, a middle, and an end. A\n Processing sketch is a single thread, often referred to as the \"Animation\"\n thread. Other threads' sequences, however, can run independently of the\n main animation loop. In fact, you can launch any number of threads at one\n time, and they will all run concurrently. <br/>\n <br/>\n You cannot draw to the screen from a function called by <b>thread()</b>.\n Because it runs independently, the code will not be synchronized to the\n animation thread, causing strange or at least inconsistent results. Use\n <b>thread()</b> to load files or do other tasks that take time. When the\n task is finished, set a variable that indicates the task is complete, and\n check that from inside your <b>draw()</b> method. <br/>\n <br/>\n Processing uses threads quite often, such as with library functions like\n <b>captureEvent()</b> and <b>movieEvent()</b>. These functions are\n triggered by a different thread running behind the scenes, and they alert\n Processing whenever they have something to report. This is useful when you\n need to perform a task that takes too long and would slow down the main\n animation's frame rate, such as grabbing data from the network. If a\n separate thread gets stuck or has an error, the entire program won't grind\n to a halt, since the error only stops that individual thread. <br/>\n <br/>\n Writing your own thread can be a complex endeavor that involves extending\n the Java <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html\">Thread</a>\n class. However, the <b>thread()</b> method is a quick and dirty way to\n implement a simple thread in Processing. By passing in a <b>String</b> that\n matches the name of a function declared elsewhere in the sketch, Processing\n will execute that function in a separate thread.",
  "syntax": ["thread(name)"],
  "returns": "void",
  "type": "function",
  "category": "structure",
  "subcategory": "",
  "parameters": [
    {
      "name": "name",
      "description": "name of the function to be executed in a separate thread",
      "type": ["String"]
    }
  ]
}
